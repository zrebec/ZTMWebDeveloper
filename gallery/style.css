/*  justify-content
    Horizontal align items
        flex-start: Items align to the left side of the container.  
        flex-end: Items align to the right side of the container.  
        center: Items align at the center of the container.  
        space-between: Items display with equal spacing between them.  
        space-around: Items display with equal spacing around them.  

/*  align-items
    Vertical align items
        flex-start: Items align to the top of the container.  
        flex-end: Items align to the bottom of the container.  
        center: Items align at the vertical center of the container.  
        baseline: Items display at the baseline of the container.  
        stretch: Items are stretched to fit the container. 

/*  flex-direction
    This CSS property defines the direction items are placed in the container:
        row: Items are placed the same as the text direction.
        row-reverse: Items are placed opposite to the text direction.
        column: Items are placed top to bottom.
        column-reverse: Items are placed bottom to top.
*/

/*  flex-wrap
    property specifies whether the flexible items should wrap or not. (default value is nowrap)
        nowrap: Every item is fit to a single line.
        wrap: Items wrap around to additional lines.
        wrap-reverse: Items wrap around to additional lines in reverse.
*/

/*  flex-flow
    The two properties flex-direction and flex-wrap are used so often together that the shorthand property
    flex-flow was created to combine them. This shorthand property accepts the value of one of the two properties
    separated by a space.
        example: flex-flow: row wrap;
*/

/*  align-content
    Property modifies the behavior of the flex-wrap property. It is similar to align-items, but instead of aligning flex
    items, it aligns flex lines. Default value is stretch.
        flex-start: Lines are packed at the top of the container.
        flex-end: Lines are packed at the bottom of the container.
        center: Lines are packed at the vertical center of the container.
        space-between: Lines display with equal spacing between them.
        space-around: Lines display with equal spacing around them.
        stretch: Lines are stretched to fit the container.
*/

body {
    margin: 0px;
}

.container {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
}

h1 {
    margin: 0px;
    font-family: fantasy;
    font-size: 3em;
    text-align: center;
    border-bottom: 2px solid pink;
    border-right: 2px solid pink;
    width: 400px;
    box-shadow: 4px 4px 5px #888888;
    margin-top: 10px;
    /* If box shadow will not work in your browser, try use it with prefixes.
    -moz-box-shadow: 4px 4px 5px #888888;
    -webkit-box-shadow: 4px 4px 5px #888888;
    -ms-box-shadow: 4px 4px 5px #888888; 
    o-box-shadow: 4px 4px 5px #888888; 
    */
}

img {
    width: 450px;
    margin: 5px;
    border: 1px solid black;
    transition: all 0.6s;
}

img:hover {
    transform: scale(1.2);
    /* transform: rotate(1080deg); */
    /* transform: rotate3d(0, 1, 0.5, 3.142rad); */
}

/* We want nice picture as first */
/* .img3 {
    order: -2;
} */

/* We want set last image as second */
/* .img12 {
    order: -1;
} */

/* We want specify align for specify picture */
/* .img1 {
    align-self: center;
} */